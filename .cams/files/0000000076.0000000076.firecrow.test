#!/usr/bin/env python
import os, sys
from subprocess import Popen, PIPE

camscwd = os.getcwd()
stg_path = camscwd + '/testing/stage'
fixture_path = camscwd + '/testing/fixtures/'

# handle working directory
def cmd(*args, **kwargs):
  cwd = kwargs["cwd"] if kwargs.get("cwd") else stg_path  
  shell = kwargs["shell"] if kwargs.get("shell") else False  
  p = Popen(args, stderr=PIPE, stdout=PIPE, cwd=cwd, shell=shell)
  p.wait()
  return p

print "[clean]"
assert cmd("rm", "-Rf", "testing/stage", cwd=camscwd).returncode == 0, "rm existing"
assert cmd("mkdir", "testing/stage", cwd=camscwd).returncode == 0, "make new stage dir"

print "[init]"
assert cmd("../../cams", "init").returncode == 0, "init"
assert cmd("cp", "1/x", "../stage", cwd=fixture_path).returncode == 0, "set up fixture files"
assert cmd("../../cams", "add", "x").returncode == 0, "add first file"

print "[diff the files in the commit]"
assert cmd("diff", ".cams/1/files/x", "x").returncode == 0, "there should be no diff between the file and the added file"

print "[committing]"
assert cmd("../../cams", "commit", "adding test file x").returncode == 0, "committing file"

c = cmd("../../cams", "list")
assert c.returncode == 0, "list should succeed"
with open("testing/fixtures/list.1", "r") as file:
  assert file.read() == c.stdout.read(), "list 1 should produce expected output"

assert cmd("cp", "2/x", "../stage", cwd=fixture_path).returncode == 0, "set up fixture files 2"
assert cmd("../../cams", "add", "x").returncode == 0, "add first file"
assert cmd("cp", "2/y", "../stage", cwd=fixture_path).returncode == 0, "set up fixture files 2"
assert cmd("../../cams", "add", "y").returncode == 0, "add first file"

print "[committing 2]"
assert cmd("../../cams", "commit", "adding test file x and y from 2").returncode == 0, "committing file"

c = cmd("../../cams", "list")
assert c.returncode == 0, "list should succeed"
with open("testing/fixtures/list.2", "r") as file:
  assert file.read() == c.stdout.read(), "list 2 should have expected output"

c = cmd("../../cams", "diff", "1", "2")
assert c.returncode == 0, "list should succeed"

with open("testing/fixtures/diff.1.2", "r") as file:
  assert file.read() == c.stdout.read(), "diff should output expected content"

"""
[all user facing commands]
x init
x add
x commit
x list
- push
- checkout
- show
- reindex
- index
- cindex
x diff
- reset
"""
